/// @file
/// @brief PC-Lint 9.x option file for linting QP-nano applications
/// @cond
///===========================================================================
/// Product: QP-nano
/// Last updated for version 6.6.0
/// Last updated on  2019-07-30
///
///                    Q u a n t u m  L e a P s
///                    ------------------------
///                    Modern Embedded Software
///
/// Copyright (C) 2005-2019 Quantum Leaps, LLC. All rights reserved.
///
/// This program is open source software: you can redistribute it and/or
/// modify it under the terms of the GNU General Public License as published
/// by the Free Software Foundation, either version 3 of the License, or
/// (at your option) any later version.
///
/// Alternatively, this program may be distributed and modified under the
/// terms of Quantum Leaps commercial licenses, which expressly supersede
/// the GNU General Public License and are specifically designed for
/// licensees interested in retaining the proprietary status of their code.
///
/// This program is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with this program. If not, see <www.gnu.org/licenses>.
///
/// Contact information:
/// <www.state-machine.com>
/// <info@state-machine.com>
///============================================================================
/// @endcond

// General
-estring(793,6)       // ANSI/ISO limit of 6 significant chars exceeded
-emacro((960),        // MISRA04-17.4(req) pointer arithmetic
 Q_DIM,
 Q_UINT2PTR_CAST)
-estring(961,         // MISRA04-19.7(adv) function-like macro
 Q_DIM,
 Q_UINT2PTR_CAST)
-esym(960,            // MISRA04-19.10(req) unparenthesized macro par
 Q_UINT2PTR_CAST)
-estring(9022,        // MISRA04-19.10(req) unparenthesized macro parameter
 Q_UINT2PTR_CAST)


// Assertions
-estring(960,         // MISRA04-8.7(req) could use block scope
 Q_this_module_)
-estring(961,         // MISRA04-19.7(adv) function-like macro
 Q_ASSERT,
 Q_ASSERT_ID,
 Q_ALLEGE,
 Q_ALLEGE_ID,
 Q_ERROR,
 Q_ERROR_ID,
 Q_REQUIRE,
 Q_REQUIRE_ID,
 Q_ENSURE,
 Q_ENSURE_ID,
 Q_INVARIANT,
 Q_INVARIANT_ID,
 Q_ASSERT_STATIC,
 Q_ASSERT_COMPILE,
 Q_TEST_ASSERT,
 Q_DEFINE_THIS_MODULE)
-esym(960,            // MISRA04-19.4(req) Disallowed macro definition
 Q_ALLEGE,
 Q_ALLEGE_ID,
 Q_ERROR,
 Q_ERROR_ID,
 Q_REQUIRE,
 Q_REQUIRE_ID,
 Q_ENSURE,
 Q_ENSURE_ID,
 Q_INVARIANT,
 Q_INVARIANT_ID,
 Q_DEFINE_THIS_FILE,
 Q_ASSERT_STATIC,
 Q_ASSERT_COMPILE,
 Q_TEST_ASSERT)
-esym(960,            // MISRA04-19.10(req) unparenthesized macro par
 Q_DEFINE_THIS_MODULE)
-estring(9022,        // MISRA04-19.10(req) unparenthesized macro parameter
 Q_DEFINE_THIS_MODULE)
-emacro(522,          // Highest operation lacks side-effects
 Q_ASSERT,
 Q_ERROR,
 Q_ALLEGE)
-function(exit,       // give Q_onAssert() the semantics of "exit"
 Q_onAssert)
-estring(752,         // not referenced
 Q_assert_compile)


// QEP-nano
-emacro(740,          // MISRA04-1.2(req) incompatible indirect types
 Q_SIG,
 Q_PAR,
 Q_HSM_UPCAST)
-estring(961,         // MISRA04-19.7(adv) function-like macro
 QP_getVersion,
 Q_SIG,
 Q_PAR,
 Q_HSM_UPCAST,
 QHsm_state,
 QHsm_childState)
-esym(960,            // MISRA04-19.4(req) Disallowed macro definition
 QHsm_childState)
-emacro(929,          // MISRA04-11.4(adv) cast pointer to pointer
 Q_HSM_UPCAST)
-emacro(740,          // MISRA04-1.2(req) pointer cast
 Q_STATE_CAST,        // (incompatible indirect types)
 Q_TRAN,
 Q_TRAN_HIST,
 Q_SUPER,
 QM_ENTRY,
 QM_EXIT,
 QM_TRAN,
 QM_TRAN_INIT,
 QM_TRAN_HIST,
 QM_TRAN_EP,
 QM_TRAN_XP)
-emacro(929,          // MISRA04-11.4(adv) cast pointer to pointer
 Q_SIG,
 Q_PAR,
 Q_STATE_CAST,
 Q_ACTION_CAST,
 Q_TRAN,
 Q_SUPER,
 QM_ENTRY,
 QM_EXIT,
 QM_TRAN,
 QM_TRAN_INIT,
 QM_TRAN_HIST,
 QM_TRAN_EP,
 QM_TRAN_XP)
-emacro(960,          // MISRA04-11.1(req) Conversions involving
 Q_STATE_CAST,        // fun. pointers must be to/from integral types
 Q_ACTION_CAST)

-emacro(960,          // MISRA04-12.10(req) comma operator used
 Q_TRAN,
 Q_TRAN_HIST,
 Q_SUPER,
 QM_ENTRY,
 QM_EXIT,
 QM_TRAN,
 QM_TRAN_INIT,
 QM_TRAN_HIST)
-estring(960,         // MISRA04-18.4(req) declaration of union type
 QMAttr)
-estring(961,         // MISRA04-19.7(adv) function-like macro
 Q_ROM_BYTE,
 Q_IGNORED,
 Q_HANDLED,
 Q_UNHANDLED,
 Q_TRAN,
 Q_TRAN_HIST,
 Q_SUPER,
 Q_STATE_CAST,
 Q_ACTION_CAST,
 QEP_getVersion)
-estring(961,         // MISRA04-19.7(adv) function-like macro
 QHSM_INIT,
 QHSM_DISPATCH,
 QM_ENTRY,
 QM_EXIT,
 QM_TRAN,
 QM_TRAN_INIT,
 QM_TRAN_HIST,
 QM_TRAN_EP,
 QM_TRAN_XP,
 QM_SUPER,
 QM_SUPER_SUB,
 QM_HANDLED,
 QM_UNHANDLED)
-esym(754,            // Info: local structure member not referenced
 target,
 act)


// QF-nano
-emacro(740,          // MISRA04-1.2(req) incompatible indirect types
 QF_ACTIVE_CAST)
-emacro(826,          // suspicious pointer-to-pointer conversion
 QF_ACTIVE_CAST,
 QACTIVE_POST,
 QACTIVE_POST_X,
 QACTIVE_POST_ISR,
 QACTIVE_POST_X_ISR)
-emacro(950,          // MISRA04-2.1(req) assembly language
 QF_INT_DISABLE,
 QF_INT_ENABLE,
 QF_ISR_DISABLE,
 QF_ISR_RESTORE)
-emacro(929,          // MISRA04-11.4(adv) cast pointer to pointer
 QF_ACTIVE_CAST,
 QACTIVE_POST,
 QACTIVE_POST_X,
 QACTIVE_POST_ISR,
 QACTIVE_POST_X_ISR)
-esym(960,            // MISRA04-19.4(req) Disallowed macro definition
 QF_INT_DISABLE,
 QF_INT_ENABLE,
 QActive_post,
 QActive_postISR)
-estring(961,         // MISRA04-19.7(adv) function-like macro
 QF_INT_DISABLE,
 QF_INT_ENABLE,
 QF_ISR_DISABLE,
 QF_ISR_RESTORE,
 QF_LOG2,
 QF_tick,
 QF_tickISR,
 QActive_arm,
 QActive_disarm,
 Q_ROM_PTR,
 QF_ACTIVE_CAST,
 QF_ROM_QUEUE_AT_,
 QF_ROM_ACTIVE_GET_,
 QACTIVE_POST,
 QACTIVE_POST_X,
 QACTIVE_POST_ISR,
 QACTIVE_POST_X_ISR,
 QActive_post,
 QActive_postISR)
-emacro(717,          // do ... while(0)
 QACTIVE_POST,
 QACTIVE_POST_ISR)

// QK-nano
-emacro(950,          // MISRA04-2.1(req) assembly language
 QK_ISR_ENTRY,
 QK_ISR_EXIT)
-esym(960,            // MISRA04-19.4(req) Disallowed macro definition
 QV_INIT,
 QK_INIT,
 QK_SCHEDULE_)
-estring(961,         // MISRA04-19.7(adv) function-like macro
 QV_INIT,
 QK_INIT,
 QK_ISR_ENTRY,
 QK_ISR_EXIT,
 QK_SCHEDULE_)
-esym(960,            // MISRA04-8.7(req) could define at block scope
 QK_intNest_)

// QV-nano
-esym(960,            // MISRA04-19.4(req) Disallowed macro definition
 QF_onIdle)
-estring(961,         // MISRA04-19.7(adv) function-like macro
 QV_CPU_SLEEP)

// Deprecated features--provided in the backwards compatibility API of QP/C
-esym(960,            // MISRA04-19.4(req) disallowed macro definition
 QHsm_init,
 QHsm_dispatch,
 QFsm,
 QFsm_ctor,
 QF_onIdle)
-estring(961,         // MISRA04-19.7(adv) function-like macro
 QMsm_init,
 QHsm_dispatch,
 QMsm_init,
 QHsm_dispatch,
 QFsm_init,
 QFsm_dispatch)
-esym(960,            // MISRA04-19.4(req) Disallowed macro definition
 QHsm_init,
 QHsm_dispatch,
 QFsm_init,
 QFsm_dispatch)

